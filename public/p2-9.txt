Paper2 Practical 9
Aim :  Max-min and Max-product Composition in Fuzzy
            Relationship
[1] Two Fuzzy relations are given by
      R = [ [0.6   0.3]                         S = [ [ 1  0.5  0.3]
          [0.2   0.9] ]                               [0.8 0.4 0.7] ]
Obtain Fuzzy relation T and T1 as a Composition between the fuzzy Relationship.

Code :
import numpy as np
# Max-Min Composition 
def maxMin(x,y):
 z = []
    for x1 in x:
for y1 in y.T:
      z.append(max(np.minimum(x1,y1)))
   return np.array(z).reshape((x.shape[0], y.shape[1]))
# Max-Product Composition given by Rosenfeld
def maxProduct(x,y):
    z = []
    for x1 in x:
        for y1 in y.T:
            z.append(max(np.multiply(x1,y1)))
    return np.array(z).reshape((x.shape[0], y.shape[1]))
# 2 arrays for the example
r = np.array([[0.6,0.3],[0.2,0.9]])
s = np.array([[1,0.5,0.3],[0.8,0.4,0.7]])
print("R1oR2 => Max-Min :\n" + str(maxMin(r,s)) + "\n")
print("R1oR2 => Max-Product :\n" + str(maxProduct(r,s)) + "\n\n")

[2] For the following fuzzy sets obtain the Composition between them 
R = {0.4/30 + 0.6/60 + 1.0/100 + 0.1+120}
I = {0.2/20 + 0.3/40 + 0.6/60 + 0.8/80 + 1.0/100 + 0.2/120}
N = {0.35/500 + 0.67/1000 + 0.97/1500 + 0.25/1800}
Perfor max-min Composition

Code :
import numpy as np
# Max-Min Composition 
def maxMin(x,y):
    z = []
    for x1 in x:
        for y1 in y.T:
            z.append(max(np.minimum(x1,y1)))
    return np.array(z).reshape((x.shape[0], y.shape[1]))
# 2 arrays for the example
r=np.array([[0.2,0.3,0.4,0.4,0.4,0.2],[0.2,0.3,0.6,0.6,0.6,0.2],[0.2,0.3,0.6,0.8,1.0,0.2,],[0.1,0.1,0.1,0.1,0.1,0.1,]])
s=np.array([[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.25],[0.35,0.6,0.6,0.25],[0.35,0.67,0.8,0.25],[0.35,0.67,0.97,0.25],[0.2,0.2,0.2,0.2]])
print("R1oR2 => Max-Min :\n" + str(maxMin(r,s)) + "\n")